user  www www;			#定义Nginx运行的用户和用户组
worker_processes auto;		#允许进程数量，建议设置为cpu核心数或者auto自动检测，注意Windows服务器上虽然可以启动多个processes，但是实际只会用其中一个

error_log  /www/wwwlogs/nginx_error.log  crit; #error日志存放位置
pid        /www/server/nginx/logs/nginx.pid; #PID存放位置

#worker_rlimit_nofile指一个nginx进程最多打开的文件描述符数目，理论值应该是系统支持最多打开文件数与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与系统支持最多打开文件数保持一致。
#例如linux 2.6内核支持开启的最大文件数为65535，worker_rlimit_nofile就相应应该填写65535。
worker_rlimit_nofile 51200;

events
    {
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。
    #补充说明：
    #与apache相类，nginx针对不同的操作系统，有不同的事件模型
    #A）标准事件模型
    #Select、poll属于标准事件模型。如果当前系统不存在更有效的方法，nginx会选择select或poll。
    #B）高效事件模型
    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
    #Epoll：使用于Linux内核2.6版本及以后的系统。
    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
        use epoll;
    #单个进程最大连接数（最大连接数=连接数*进程数）
    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。
        worker_connections 51200;
        multi_accept on;
        
        
        #keepalive超时时间。
    keepalive_timeout 60;

        #客户端请求头部的缓冲区大小,这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE 取得。
        #[root@web001 ~]# getconf PAGESIZE
        #4096
        #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
        #client_header_buffer_size 4k;

       
       #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。
       #open_file_cache max=65535 inactive=60s;

        #多长时间检查一次缓存的有效信息。
        #open_file_cache_valid 80s;

        #指定在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态， 默认值为1。
        #open_file_cache_min_uses 1;

        #指定是否在搜索一个文件时记录cache错误，默认值为off。
        #open_file_cache_errors on;
    }

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http
    {
     #文件扩展名与文件类型映射表，在mine.types中配置的类型
        include       mime.types;	
		#include luawaf.conf;

		include proxy.conf;

	#默认文件类型，如果mime预先定义的类型没匹配上，默认使用二进制流的方式传输
        default_type  application/octet-stream; 

	#服务器名字的hash表大小
       #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数server_names_hash_bucket_size 总是等于hash表的大小，并且是一路处理器缓存大小的倍数，这样做可以减少内存的读取次数，进而加速处理器查找hash表的键与值
        server_names_hash_bucket_size 512;
        #客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小，分页大小可以用命令getconf PAGESIZE取得。
        client_header_buffer_size 32k;
         #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。
        large_client_header_buffers 4 32k;
        #设定通过nginx上传文件的大小
        client_max_body_size 50m;


    #sendfile指令指定nginx是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。
        sendfile   on;
        #此选项允许或禁止使用socket的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
        tcp_nopush on;

 #长连接超时时间，单位是秒
        keepalive_timeout 60;

        tcp_nodelay on;

        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        fastcgi_buffer_size 64k;
        fastcgi_buffers 4 64k;
        fastcgi_busy_buffers_size 128k;
        fastcgi_temp_file_write_size 256k;
	fastcgi_intercept_errors on;

 #开启gzip压缩输出
        gzip on;
        #gzip_min_length 1k;    #最小压缩文件大小
        #gzip_buffers 4 16k;    #压缩缓冲区
        #gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
        #gzip_comp_level 2;    #压缩等级
        #gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;
         #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
        gzip_min_length  1k;
        gzip_buffers     4 16k;
        gzip_http_version 1.1;
        gzip_comp_level 2;
        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
        gzip_vary on;
        gzip_proxied   expired no-cache no-store private auth;
        gzip_disable   "MSIE [1-6]\.";

	#开启限制IP连接数的时候需要使用
        limit_conn_zone $binary_remote_addr zone=perip:10m;
		limit_conn_zone $server_name zone=perserver:10m;

        server_tokens off;
        access_log off;




#负载均衡配置
    upstream testCluster {
     
        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。
        server 192.168.80.121:80 weight=3;
        server 192.168.80.122:80 weight=2;
        server 192.168.80.123:80 weight=3;

        #nginx的upstream目前支持4种方式的分配
        #1、轮询（默认）
        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
        #2、weight
        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
        #例如：
        #upstream 负载均衡配置的名字 {
        #    server 192.168.0.14 weight=10;
        #    server 192.168.0.15 weight=10;
        #}
        #2、ip_hash
        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
        #例如：
        #upstream 负载均衡配置的名字 {
        #    ip_hash;
        #    server 192.168.0.14:88;
        #    server 192.168.0.15:80;
        #}
        #3、fair（第三方）
        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。
        #upstream 负载均衡配置名字 {
        #    server server1;
        #    server server2;
        #    fair;
        #}
        #4、url_hash（第三方）
        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。
        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法
        #upstream 负载均衡配置的名字 {
        #    server squid1:3128;
        #    server squid2:3128;
        #    hash $request_uri;
        #    hash_method crc32;
        #}

        #tips:
        #upstream 负载均衡配置的名字{#定义负载均衡设备的Ip及设备状态}{
        #    ip_hash;
        #    server 127.0.0.1:9090 down;
        #    server 127.0.0.1:8080 weight=2;
        #    server 127.0.0.1:6060;
        #    server 127.0.0.1:7070 backup;
        #}
        #每个设备的状态设置为:
        #1.down表示单前的server暂时不参与负载
        #2.weight为weight越大，负载的权重就越大。
        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误
        #4.fail_timeout:max_fails次失败后，暂停的时间。
        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。

        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。
        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug
        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录
        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡
    }





 #虚拟主机的配置
server
    {
    #监听端口
        listen 888;
         #域名，可以有多个，用空格隔开
        server_name phpmyadmin;
        index index.html index.htm index.php; # 默认页面
        root  /www/server/phpmyadmin; 

	#error_page 500 502 503 504 /50x.html;
        #error_page   404   /404.html;
        include enable-php.conf;

	# 负载均衡配置
	# location ~ .*.(php|php5)?$
        # {
            # fastcgi_pass 127.0.0.1:9000;
            # fastcgi_index index.php;
            # include fastcgi.conf;
            # proxy_pass http://testCluster;
        }
        #例：
	#location / {
            #proxy_pass http://testCluster;
        #}

#图片缓存时间设置
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

 #JS和CSS缓存时间设置
        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        location ~ /\.
        {
            deny all;
        }

        access_log  /www/wwwlogs/access.log;
    }
include /www/server/panel/vhost/nginx/*.conf;
}

